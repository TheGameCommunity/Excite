plugins {
	id 'eclipse'
	id 'java-library'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version "8.1.1"
}

repositories {
	mavenCentral()
}

sourceCompatibility = 21
targetCompatibility = 21

group = 'com.thegamecommunity'
version = "${project.version}"

dependencies {
	shadow group: 'org.apache.commons', name: 'commons-text', version: '1.12.0'
	shadow group: 'commons-io', name: 'commons-io', version: '2.18.0'
	shadow group: 'commons-codec', name: 'commons-codec', version: '1.17.1'
	shadow group: 'javax.activation', name: 'javax.activation-api', version: '1.2.0'
	shadow group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'
	
	testImplementation group: 'org.junit.jupiter', name:'junit-jupiter-api', version: '5.10.3'
	testRuntimeOnly group: 'org.junit.jupiter', name :'junit-jupiter-engine', version: '5.10.2'
}

configurations.testImplementation {
    extendsFrom(configurations.shadow)
}

shadowJar {
	mergeServiceFiles()
	configurations = [project.configurations.shadow]
	exclude 'META-INF/LICENSE'
	exclude 'META-INF/LICENSE.txt'
	exclude 'META-INF/LICENSsE.txt'
	exclude 'META-INF/NOTICE'
	exclude 'META-INF/NOTICE.txt'
	exclude 'META-INF/DEPENDENCIES'
	exclude 'LICENSE.txt'
}

test {
	useJUnitPlatform()
}

task sourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

import org.apache.tools.ant.filters.ReplaceTokens

task processSource(type: Sync) {
	from sourceSets.main.java
	into "$buildDir/src"
	inputs.property 'EQuickLZVersion', EQuickLZVersion;
	
	filter(ReplaceTokens, tokens: [EQuickLZVersion: EQuickLZVersion])
	
}

jar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes(
			'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' '),
			'MixinConfigs': 'mixins.json',
			'Specification-Version': 8.0,
			'Multi-Release': 'true'
		)
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
	}
}

compileJava {
	source = processSource.outputs
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}
